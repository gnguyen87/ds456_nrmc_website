---
title: "Adovocating for Equitable Access to Urban Green Spaces"
author: "Mikaely Evans"
format:
  closeread-html:
    theme: custom.css
---

Urban areas in the United States are growing to now accommodate about 83% of the population (1). As cities grow to accommodate the needs of their populations, it becomes increasingly essential to consider how cities are prioritizing green spaces and urban trees. Along with the ecological benefits, urban green spaces have been shown to improve mental health, physical health, and generate a sense of community for the surrounding residents (2). The following map and statistical analysis show that there is a need to make urban green space more accessible for disadvantaged communities.
\

```{r, message=FALSE, echo=FALSE}
library(httr)
library(jsonlite)
library(sf)
library(ggplot2)
library(ggspatial)
library(dplyr)
library(tidyr)
library(stringr)
library(leaflet)
```

```{r, message=FALSE, echo=FALSE, include=FALSE}
# Downloading MN All Park ArcGIS data from Metropolitan Council
base_url2 <- "https://services.arcgis.com/afSMGVsC7QlRK1kZ/arcgis/rest/services/Parks/FeatureServer/0/query"
# geometryType=esriGeometryEnvelope&geometry={xmin: -104, ymin: 35.6, xmax: -94.32, ymax: 41}
# {
#   "x": <x>,
#   "y": <y>,
#   "z": <z>,
#   "m": <m>,
#   "id":<id>,
#   "spatialReference": { <spatialReference> }
# }
query_params2 <- list(
  geometry = '{
    "xmin": -10394540.56,
    "ymin": 5603024.26,
    "xmax": -10373503.03,
    "ymax":  5629581.38,
    "spatialReference": {"wkid":102100} 
  }',
  geometryType2 = "esriGeometryEnvelope",
  outFields = "*",
  f = "geojson"
)
response2 <- GET(base_url2, query = query_params2)
geojson_data2 <- content(response2, as = "text", encoding = "UTF-8") %>% fromJSON()
temp_geojson2 <- tempfile(fileext = ".geojson")

writeBin(content(response2, as = "raw"), temp_geojson2)
# Read the GeoJSON data as a shape file object
geojson_sf_2 <- st_read(temp_geojson2)
```

```{r, echo=FALSE, include = FALSE}
# Downloading other important data from GitHub
svi <- read.csv("../data/clean/svi.csv")
holc <- st_read("../data/clean/redlining_msp_shp/redlining_msp.shp")
```

```{r, echo=FALSE, include=FALSE}
library(tigris)
library(tidycensus)
options(tigris_use_cache = TRUE) 
mn_census_tract <- tracts(state = "MN", cb = FALSE, year = 2022) %>%
  filter(COUNTYFP == "053") # collect hennepin county census tracts

minneapolis_boundary <- places(state = "MN", year = 2022, class = "sf") %>%
  filter(NAME == "Minneapolis")

mn_lake <- area_water(state = "MN", count = 'Hennepin')

mpls_tracts <- st_intersection(mn_census_tract, minneapolis_boundary)
mpls_lakes <- st_intersection(mn_lake, minneapolis_boundary)

mpls_tracts <- st_transform(mpls_tracts, 4326) # make the same crs
mpls_lakes <- st_transform(mpls_lakes, 4326) # make the same crs

parks_in_tracts <- st_intersection(mpls_tracts, geojson_sf_2) # get overlapping area
  
parks_in_tracts_2 <- parks_in_tracts %>% 
  st_difference(st_union(mpls_lakes))

lakeless_tracts <- mpls_tracts %>% 
  st_difference(st_union(mpls_lakes)) 
```

```{r, echo = FALSE, include = FALSE}
# Goal: Create data frame with park area per tract
parks_in_tracts_3 <- parks_in_tracts_2 %>%
  group_by(GEOID) %>% # Group by census tract
  mutate(total_park_area = (sum(ACRES)*4046.86)) %>% # add total park acres per census tract and convert units
  select(GEOID, total_park_area) %>% # select important cols
  distinct(GEOID, .keep_all = TRUE) %>% # Get one number for each tract
  st_drop_geometry() # Drop geometry for further data merge

# It is okay to drop geometry here because we are only going for the number area, not the shape of the park areas in the census tracts.

lakeless_tracts <- st_make_valid(lakeless_tracts)

# Goal: Add the total_park_area column to the mn_census_tract data so we can make a map with the total_park_area as the fill variable
mn_census_tract_2 <- lakeless_tracts %>%
  left_join(parks_in_tracts_3, by = "GEOID") %>% # Match all ocurrences
  mutate(total_park_area = replace_na(total_park_area, 0)) %>%
  mutate(park_area_ratio = total_park_area / st_area(lakeless_tracts)) %>%
  mutate(park_area_ratio = str_remove(park_area_ratio, "[1/m^2]")) %>%
  mutate(park_area_ratio = as.numeric(park_area_ratio))
```

```{r, echo = FALSE}
library(htmltools)
# Adding Leaflet Map
palette <- colorNumeric(palette = rev("Greens"), domain=mn_census_tract_2$total_park_area)
mn_census_tract_3 <- st_collection_extract(mn_census_tract_2, type = "POLYGON") %>%
  mutate(total_park_area = round(total_park_area, digits = 2))

park_area_leaf <- leaflet(data = mn_census_tract_3) %>%
  
  addProviderTiles("OpenStreetMap") %>% 

  addPolygons(
    fillColor = ~palette(total_park_area),
    color = "black",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.9,
    label = ~paste("Park Area:", total_park_area, "m\u00B2")
  ) %>%
  
  addLegend(
    "bottomright",
    pal = palette,
    values = ~total_park_area,
    title = HTML('<span style="color: black;">Total Park Area m\u00B2</span>')
  ) %>%
  
  addControl("Total Park Area by Census Tract in Minneapolis", position = "topright")

park_area_leaf_2 <-  htmlwidgets::onRender(park_area_leaf, "
  function(el, x) {
    // Function to highlight feature on mouseover
    function highlightFeature(e) {
      var layer = e.target;
      layer.setStyle({
        weight: 5, // Increase border width
        color: '#0000FF' // Highlight border color
      });
    }

    // Function to reset highlight on mouseout
    function resetHighlight(e) {
      var layer = e.target;

      // Handle CircleMarker layers
      if (layer instanceof L.CircleMarker) {
        layer.setStyle({
          color: layer.options.originalColor, // Reset to original stroke color
          weight: 1.5 // Reset border weight
        });
      } else {
        // Reset other layers
        layer.setStyle({
          weight: 1.5, // Reset border weight
          color: 'black' // Reset border color
        });
      }
    }

    // Iterate over all layers and add event listeners
    this.eachLayer(function(layer) {
      // Store original styles for CircleMarker layers
      if (layer instanceof L.CircleMarker) {
        layer.options.originalColor = layer.options.color || 'black'; // Store original color
      }

      // Add hover event listeners
      layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight
      });
    });
  }
")

park_area_leaf_2
```



```{r, include = FALSE}
# Redlining per census tract data from GitHub/Na's code
msp_census_tracts <- read.csv("../data/raw/minneapolis-tree-canopy.csv") %>%  select(region_name)
msp_census_tracts <- msp_census_tracts %>%
  mutate(region_name = str_replace_all(region_name, '[:alpha:]*', "") %>% str_trim()) %>%
  filter(region_name != "27123043002") %>%
  filter(region_name != "27053980000") %>%
  pull(region_name) %>%
  as.list()

redlining <- st_read('../data/raw/141121-V2/HRS2020B.shp')
redlining_msp <- redlining %>%
  filter(GEOID20 %in% msp_census_tracts) %>%
  st_drop_geometry() %>%
  rename(holc_grade = EQINTER20) %>%
  mutate(holc_grade = case_when(
    holc_grade == 1 ~ "A",
    holc_grade == 2 ~ "B",
    holc_grade == 3 ~ "C",
    holc_grade == 4 ~ "D",
  ))

redlining_parks <- redlining_msp %>%
  select(GEOID20, holc_grade) %>%
  st_drop_geometry() %>%
  inner_join(mn_census_tract_2, by = c("GEOID20" = "GEOID"))
lm_redline_parks <- lm(total_park_area ~ holc_grade, data = redlining_parks)
summary(lm_redline_parks)
```

\


As demonstrated above, access to park areas varies across Minneapolis census tracts, with some tracts lacking parks entirely and others having an abundance. In order to test whether or not parks are equally available across census tracts in Minneapolis, we performed a linear regression analyzing the relationship between total park area ($m^2$) and HOLC grade. This data came from [cite HOLC].

**lm(formula = total_park_area ~ holc_grade)**

| Variable        | Estimate  | Std. Error  | t-value | P-value       |
|-----------------|-----------|-------------|---------|---------------|
| Intercept       | 960894    | 207396      | 4.633   | 9.79e-06 ***  |
| holc_grade_B    | -189583   | 236679      | -0.801  | 0.42482       |
| holc_grade_C    | -817086   | 242877      | -3.364  | 0.00105 **    |
| holc_grade_D    | -736108   | 255695      | -2.879  | 0.00478 **    |

\

The linear regression model uses the park areas in census tracts of HOLC grade A as a baseline to compare to census tracts of HOLC grades B, C, and D. The results from this model show that there is no significant difference in total park area between census tracts of HOLC grades A and B since the P-value is insignificant. However, the model shows a significant decline in total park area in both census tracts of HOLC grades C and D in comparison to HOLC grade A census tracts. HOLC grade C census tracts are expected to have 817086 $m^2$ less park area than HOLC grade A census tracts, and HOLC grade D census tracts are expected to have 736108 $m^2$ less park area than HOLC grade A census tracts. While this model analyzes the park area across census tracts, our site visit exploration also showed that the parks in HOLC grade A neighborhoods were much more developed and attended than the parks in HOLC grade C and D neighborhoods. This prompts future investment into already existing parks in HOLC grade C and D neighborhoods.

\

**Add introductory sentence** Below, we use a linear model to analyze the relationship between park space and social vulnerability in Minneapolis census tracts. 

**lm(formula = SVI ~ total_park_area)**

| Variable        | Estimate  | Std. Error  | t-value | P-value       |
|-----------------|-----------|-------------|---------|---------------|
| Intercept       | 0.674195  | 0.046930    | 14.366  | <2*10^-16 *** |
| park_percentage | -0.009326 | 0.003583    | -2.603  | 0.0107        |


\

This model shows us that for every additional 1% of a census tract area covered by parks, its social vulnerability score (measured on a 0 to 1 percentile scale) drops by an average of 0.009. That is, if one tract has 10% more green space than another, we can expect it to score 9 percentile points better on SVI, indicating **a strong relationship between a community's access to public green spaces and its overall wellbeing**. 









